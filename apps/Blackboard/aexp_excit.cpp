//Machine-generated by miind.py. Edit at your own risk.

#include <boost/timer/timer.hpp>
#include <GeomLib.hpp>
#include <TwoDLib.hpp>
#include <MPILib/include/MPINetworkCode.hpp>
#include <MPILib/include/RateAlgorithmCode.hpp>
#include <MPILib/include/SimulationRunParameter.hpp>
#include <MPILib/include/report/handler/RootReportHandler.hpp>
#include <MPILib/include/report/handler/MinimalReportHandler.hpp>
#include <MPILib/include/report/handler/CsvReportHandler.hpp>
#include <MPILib/include/WilsonCowanAlgorithm.hpp>
#include <MPILib/include/PersistantAlgorithm.hpp>
#include <MPILib/include/DelayAlgorithmCode.hpp>
#include <MPILib/include/RateFunctorCode.hpp>
typedef MPILib::MPINetwork<MPILib::DelayedConnection, MPILib::utilities::CircularDistribution> Network;
	// defining variables
	const double omega = 1.0;
int main(int argc, char *argv[]){
	Network network;
	boost::timer::auto_cpu_timer t;

#ifdef ENABLE_MPI
	// initialise the mpi environment this cannot be forwarded to a class
	boost::mpi::environment env(argc, argv);
#endif

	try {	// generating algorithms
	std::vector<std::string> vec_mat_0{"aexp045c42a8-7be8-409a-a37e-a88e1d135c03_1_0_0_0_.mat",
									"aexp045c42a8-7be8-409a-a37e-a88e1d135c03_-1_0_0_0_.mat",
									"aexp045c42a8-7be8-409a-a37e-a88e1d135c03_3_0_0_0_.mat",
									"aexp045c42a8-7be8-409a-a37e-a88e1d135c03_-3_0_0_0_.mat"};
	TwoDLib::MeshAlgorithm<DelayedConnection> alg_mesh_0("aexp045c42a8-7be8-409a-a37e-a88e1d135c03.model", vec_mat_0, 0.00002);
	TwoDLib::MeshAlgorithm<DelayedConnection> alg_mesh_1("aexp045c42a8-7be8-409a-a37e-a88e1d135c03.model", vec_mat_0, 0.00002);
	MPILib::Rate RateFunction_1(MPILib::Time);
	MPILib::RateFunctor<DelayedConnection> rate_functor_1(RateFunction_1);
	MPILib::Rate RateFunction_2(MPILib::Time);
	MPILib::RateFunctor<DelayedConnection> rate_functor_2(RateFunction_2);
	MPILib::Rate RateFunction_3(MPILib::Time);
	MPILib::RateFunctor<DelayedConnection> rate_functor_3(RateFunction_1);
	MPILib::Rate RateFunction_4(MPILib::Time);
	MPILib::RateFunctor<DelayedConnection> rate_functor_4(RateFunction_2);
	// generating nodes
	MPILib::NodeId id_0 = network.addNode(alg_mesh_0,MPILib::EXCITATORY_DIRECT);
	MPILib::NodeId id_00 = network.addNode(alg_mesh_1,MPILib::EXCITATORY_DIRECT);
	MPILib::NodeId id_1 = network.addNode(rate_functor_1,MPILib::NEUTRAL);
	MPILib::NodeId id_2 = network.addNode(rate_functor_2,MPILib::NEUTRAL);
	MPILib::NodeId id_3 = network.addNode(rate_functor_3,MPILib::NEUTRAL);
	MPILib::NodeId id_4 = network.addNode(rate_functor_4,MPILib::NEUTRAL);
	// generating connections
	DelayedConnection con_1_0_0(1,1.,0);
	network.makeFirstInputOfSecond(id_1,id_0,con_1_0_0);
	DelayedConnection con_2_0_0(1,-1.,0);
	network.makeFirstInputOfSecond(id_2,id_0,con_2_0_0);
	DelayedConnection con_3_0_0(1,3.,0);
	network.makeFirstInputOfSecond(id_3,id_0,con_3_0_0);
	DelayedConnection con_4_0_0(1,-3.,0);
	network.makeFirstInputOfSecond(id_4,id_0,con_4_0_0);

	DelayedConnection con_5_0_0(1,3.,0);
	network.makeFirstInputOfSecond(id_0,id_00,con_5_0_0);

	// generation simulation parameter
	MPILib::report::handler::CsvReportHandler handler("adex",true);

	SimulationRunParameter par_run( handler,1000000,0,0.1,1e-02,0.0001,"adex.log",1e-03);
	network.configureSimulation(par_run);
	network.evolve();
	} catch(std::exception& exc){
		std::cout << exc.what() << std::endl;
#ifdef ENABLE_MPI
	//Abort the MPI environment in the correct way :
	env.abort(1);
#endif
	}

	MPILib::utilities::MPIProxy().barrier();
	t.stop();
	if (MPILib::utilities::MPIProxy().getRank() == 0) {

		std::cout << "Overall time spend\n";
		t.report();
	}
	return 0;
}
MPILib::Rate RateFunction_1(MPILib::Time t){
	return 2000.;
}
MPILib::Rate RateFunction_2(MPILib::Time t){
	return t < 0.1 ? 0. : 0.;
}
