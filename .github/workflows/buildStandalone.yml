name: Build Standalone

on: [push]

jobs: 
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15] #
        include:
          - os: ubuntu-18.04
            installDir: /usr/local
          - os: macos-10.15
            installDir: /usr/local
            
    env:
      buildDir: '${{ github.workspace }}/build'
      installDir: '${{ matrix.installDir }}'
    steps:
      - uses: actions/checkout@v2
      
      - uses: lukka/get-cmake@latest
      
      - name: Ubuntu - install dependencies
        run: |
          sudo apt-get install ninja-build libboost-all-dev libpugixml-dev fftw3-dev freeglut3-dev libgsl0-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev
          sudo add-apt-repository ppa:graphics-drivers
          sudo apt-key adv --fetch-keys  http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
          sudo bash -c 'echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list'
          sudo bash -c 'echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda_learn.list'
          sudo apt update
          sudo apt install cuda-10-1
          sudo apt install libcudnn7
        if: contains( matrix.os, 'ubuntu')

      - name: Add cuda to path
        run: echo '/usr/local/cuda-10.1/bin' >> $GITHUB_PATH
        if: contains( matrix.os, 'ubuntu')

      - name: Add cuda to ld
        run: echo "LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64" >> $GITHUB_ENV
        if: contains( matrix.os, 'ubuntu')

      - name: MacOS - install dependencies
        run: brew install gcc6 pugixml boost freeglut gsl boost-python3 xquartz fftw libomp pkg-config ninja
        if: contains( matrix.os, 'macos')
      
      - name: dir
        run: find $RUNNER_TEMP
        shell: bash
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
        
      - name: Run CMake
        uses: lukka/run-cmake@main
        env:
          CC: gcc-6
          CXX: g++-6
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildDirectory: '${{ env.buildDir }}'
          cmakeAppendedArgs: '"-GNinja" -DCMAKE_INSTALL_PREFIX=${{ env.installDir }} -DCMAKE_BUILD_TYPE=Release -DENABLE_OPENMP:BOOL=ON -DENABLE_MPI:BOOL=OFF -DENABLE_CUDA:BOOL=OFF'
          buildWithCMake: true
        if: contains( matrix.os, 'macos')
        
      - name: Run CMake on Linux
        uses: lukka/run-cmake@main
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildDirectory: '${{ env.buildDir }}'
          cmakeAppendedArgs: '"-GNinja" -DCMAKE_INSTALL_PREFIX=${{ env.installDir }} -DCMAKE_BUILD_TYPE=Release -DENABLE_OPENMP:BOOL=ON -DENABLE_MPI:BOOL=OFF -DENABLE_CUDA:BOOL=ON'
          buildWithCMake: true
        if: contains( matrix.os, 'ubuntu')
        
      - name: Install MIIND
        working-directory: ${{ env.buildDir }}  
        run: sudo ninja install
        shell: bash

      - name: Add miindio.py to path
        run: echo '${{ env.installDir }}/share/miind/python' >> $GITHUB_PATH
      - name: Add MIIND_LIBRARY_DIR to ENV
        run: echo "MIIND_LIBRARY_DIR=${{ env.installDir }}/lib" >> $GITHUB_ENV
      - name: Add LD_LIBRARY_PATH to ENV
        run: echo "LD_LIBRARY_PATH=${{ env.installDir }}/lib" >> $GITHUB_ENV
        if: contains( matrix.os, 'ubuntu')
      - name: Add DYLD_LIBRARY_PATH to ENV
        run: echo "DYLD_LIBRARY_PATH=${{ env.installDir }}/lib" >> $GITHUB_ENV
        if: contains( matrix.os, 'macos')
      - name: Add miind python to PYTHONPATH
        run: echo "PYTHONPATH=${{ env.installDir }}/share/miind/python" >> $GITHUB_ENV
      - name: Add OMP_NUM_THREADS to ENV
        run: echo "OMP_NUM_THREADS=1" >> $GITHUB_ENV
      - name: Add miind includes to CPLUS_INCLUDE_PATH
        run: echo "CPLUS_INCLUDE_PATH=${{ env.installDir }}/include/miind:${{ env.installDir }}/include/miind/GeomLib" >> $GITHUB_ENV
      - name: Add MIIND_INCLUDE_DIR to ENV
        run: echo "MIIND_INCLUDE_DIR=${{ env.installDir }}/include/miind" >> $GITHUB_ENV
      - name: Update locate database on Linux
        run: sudo updatedb
        shell: bash
        if: contains( matrix.os, 'ubuntu')
      - name: Update locate database on MACOS
        run: sudo /usr/libexec/locate.updatedb
        shell: bash
        if: contains( matrix.os, 'macos')
        
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
        
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy matplotlib==3.2 scipy shapely descartes
        shell: bash

      - name: Check MatrixGenerator works
        run: ${{ env.installDir }}/share/miind/apps/MatrixGenerator/MatrixGenerator
        shell: bash
       
      # WARNING: TESTS FAIL FOr MACOS BUILD BUT I DON't HAVE A MAC TO DEBUG THE ISSUE. 
      - name: Run Integration Tests
        env:
          CC: gcc-6
          CXX: g++-6
        working-directory: ${{ github.workspace }}/examples/IntegrationTests 
        run: python system_tests.py
        shell: bash
        if: contains( matrix.os, 'macos')
        
      - name: Run Integration Tests
        working-directory: ${{ github.workspace }}/examples/IntegrationTests 
        run: python system_tests.py
        shell: bash
        if: contains( matrix.os, 'ubuntu')
      
        
        
